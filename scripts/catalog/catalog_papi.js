const path = require('path');
const fs = require('fs');
const yaml = require('js-yaml');
const {
  slugify,
  getCatalog,
  getConnectionModes,
  isCatalogItemHidden,
  sanitize,
  doesCatalogItemExist
} = require('./utilities.js');

require('dotenv').config();

const PAPI_URL = "https://api.segmentapis.com";

const regionalSupport = yaml.load(fs.readFileSync(path.resolve(__dirname, `../src/_data/regional-support.yml`)));

// This file keeps a list of known test sources that show up in the system. 
// Because we don't have a status value for sources, they end up showing in our catalog.
// We use this below to prevent them from being written to yaml.
const testSources = yaml.load(fs.readFileSync(path.resolve(__dirname, `../src/_data/catalog/test_sources.yml`)));



const updateWarehouses = async () => {
  let warehouses = [];
  let nextPageToken = "MA==";
  let warehousesUpdated = [];

  while (nextPageToken !== undefined) {
    const res = await getCatalog(`${PAPI_URL}/catalog/warehouses/`, nextPageToken);
    warehouses = warehouses.concat(res.data.warehousesCatalog);
    nextPageToken = res.data.pagination.next;
  }

  warehouses.sort((a, b) => {
    if (a.name.toLowerCase() < b.name.toLowerCase()) {
      return -1;
    }
    if (a.name.toLowerCase() > b.name.toLowerCase()) {
      return 1;
    }
    return 0;
  });

  const regionalWarehouseEndpoints = regionalSupport.warehouses.endpoint;
  const regionalWarehouseRegions = regionalSupport.warehouses.region;

  warehouses.forEach(warehouse => {
    let slug = slugify(warehouse.slug);
    let endpoints = ['us'];
    let regions = ['us'];
    let url = `connections/storage/catalog/${slug}`;

    if (regionalWarehouseEndpoints.includes(slug)) {
      endpoints.push('eu');
    }

    if (regionalWarehouseRegions.includes(slug)) {
      regions.push('eu');
    }

    let updatedWarehouse = {
      id: warehouse.id,
      display_name: warehouse.name,
      url,
      slug,
      endpoints,
      regions
    };

    warehousesUpdated.push(updatedWarehouse);
  });

  const options = {
    noArrayIndent: true
  };
  const todayDate = new Date().toISOString().slice(0, 10);

  // Create regional support YAML file
  let output = "# AUTOGENERATED LIST OF CONNECTIONS THAT SUPPORT REGIONAL\n";
  output += "# Last updated " + todayDate + " \n";
  output += yaml.dump({
    warehouses: warehousesUpdated
  }, options);
  fs.writeFileSync(path.resolve(__dirname, `../src/_data/catalog/regional-supported.yml`), output);

  console.log("warehouses done");
};

// Execute the update functions
updateWarehouses();
updateSources();
updateDestinations();
