const axios = require('axios');
const path = require('path');
const fs = require('fs');
const yaml = require('js-yaml');

require('dotenv').config();

PLATFORM_API_URL = "https://platform.segmentapis.com"

const slugify = (displayName) => {
  return displayName.toLowerCase().replace(' ', '-')
}

const getCatalog = async (url, page_token = "") => {
  try {
   const res = await axios.get(url, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.PLATFORM_API_TOKEN}`
      },
      params: {
        page_token,
        page_size: 100
      }
    });
    return res.data
  } catch (error) {
    console.log(error)
  }
}

const updateSources = async () => {
  let sources = []
  let nextPageToken = null
  while (nextPageToken !== "") {
    const res = await getCatalog(`${PLATFORM_API_URL}/v1beta/catalog/sources`, nextPageToken)
    sources = sources.concat(res.sources)
    nextPageToken = res.next_page_token
  }
  const options = { noArrayIndent: true };
  let output = "# AUTOGENERATED FROM PLATFORM API. DO NOT EDIT\n"
  output += yaml.safeDump({ sections: sources }, options);
  fs.writeFileSync(path.resolve(__dirname, `../src/_data/catalog/sources.yml`), output);
}

const updateSourcesV2 = async () => {
  let sources = []
  let sourcesUpdated = []
  let nextPageToken = null
  while (nextPageToken !== "") {
    const res = await getCatalog(`${PLATFORM_API_URL}/v1beta/catalog/sources`, nextPageToken)
    sources = sources.concat(res.sources)
    nextPageToken = res.next_page_token
  }
  sources.forEach((source, index) => {
    let slug = slugify(source.display_name)
    let updatedSource = {
      display_name: source.display_name,
      slug,
      name: source.name,
      description: source.description,
      url: `connections/sources/catalog/${slug}`,
      logo:  source.logos.logo,
      mark: source.logos.mark,
      categories: source.categories
    }
    // console.log(updatedSource)
    sourcesUpdated.push(updatedSource)
  })
  const options = { noArrayIndent: true };
  let output = "# AUTOGENERATED FROM PLATFORM API. DO NOT EDIT\n"
  output += yaml.safeDump({ items: sourcesUpdated }, options);
  fs.writeFileSync(path.resolve(__dirname, `../src/_data/catalogV2/sources.yml`), output);
}

const updateDestinations = async () => {
  let destinations = []
  let nextPageToken = null
  while (nextPageToken !== "") {
    const res = await getCatalog(`${PLATFORM_API_URL}/v1beta/catalog/destinations`, nextPageToken)
    destinations = destinations.concat(res.destinations)
    nextPageToken = res.next_page_token
  }
  const options = { noArrayIndent: true };
  let output = "# AUTOGENERATED FROM PLATFORM API. DO NOT EDIT\n"
  output += yaml.safeDump({ items: destinations }, options);
  fs.writeFileSync(path.resolve(__dirname, `../src/_data/catalog/destinations.yml`), output);
}

const updateDestinationsV2 = async () => {
  let destinations = []
  let destinationsUpdated = []
  let nextPageToken = null
  while (nextPageToken !== "") {
    const res = await getCatalog(`${PLATFORM_API_URL}/v1beta/catalog/destinations`, nextPageToken)
    destinations = destinations.concat(res.destinations)
    nextPageToken = res.next_page_token
  }
  destinations.forEach(destination => {
    let slug = slugify(destination.display_name)
    let updatedDestination = {
      display_name: destination.display_name,
      slug,
      name: destination.name,
      description: destination.description,
      url: `connections/sources/catalog/${slug}`,
      status: destination.status,
      logo:  destination.logos.logo,
      mark: destination.logos.mark,
      categories: destination.categories
    }
    destinationsUpdated.push(updatedDestination)
  })
  const options = { noArrayIndent: true };
  let output = "# AUTOGENERATED FROM PLATFORM API. DO NOT EDIT\n"
  output += yaml.safeDump({ items: destinationsUpdated }, options);
  fs.writeFileSync(path.resolve(__dirname, `../src/_data/catalogV2/destinations.yml`), output);
}

updateSources()
updateSourcesV2()
updateDestinations()
updateDestinationsV2()